#!/bin/sh
xsk Super_L Super_R && noTimeout="-t 0"

pidof -x -o $$ taskbar && exit

sanitize() {
 sed 's/</‚â∫/g'
} 

windowState() {
    local win=$(xdotool getactivewindow)
    local state="$(xprop -id $win)"

    printf '['

    (printf "$state" | grep -qi 'floating[^=]*= 1') && printf 'F '
    (printf "$state" | grep -qi maximized) && printf '+ '
    (printf "$state" | grep -qi sticky) && printf 'S '
    
    printf '%s] %s' "$(($(xdotool get_desktop_for_window "$win")+1))" "$(xdotool getwindowname "$win" | sanitize)"
}

windowList() {
    xdotool search --onlyvisible --desktop $(xdotool get_desktop) . getwindowname %@ | sanitize
}

powerState() {
    local sep=''
    cd /sys/class/power_supply
    ls | while read supply; do
        printf "$sep"
        case "$(< "$supply/type")" in
            Mains)
                if test "$(< "$supply/online")" = "1"; then
                    printf "${supply}: online"
                else
                    printf "${supply}: unplugged"
                fi
                ;;
            Battery)
                if test "$(< "$supply/present")" = "1"; then
                    local capacity="$(< "$supply/capacity")"
                    local power="$(< "$supply/power_now")"
                    local mul=1000000
                    if test -z "$power"; then power="$(<"$supply/voltage_now")"; mul="$(<"$supply/current_now")"; fi
                    printf '%s: %s%% [%s] (%sW %s)' \
                        "$supply" \
                        "$capacity" \
                        "$(progbar "$capacity" 100 -v)" \
                        "$(printf '%s %s' "$power" "$mul" | awk '{print $1*$2*10^-12}')" \
                        "$(< "$supply/status")"
                fi
                ;;
            *)
                printf 'Unknown: %s' "$supply"
                ;;
        esac
        sep=' / '
    done
    printf '\n'
}

soundState() {
    amixer get Master | tail -1 | sed 's/^[^:]\+:/Master/'
}

playerState() {
     xdotool search YouTube getwindowname | sed 's/- YouTube - Chromium//'
     { 
         gpmdp-remote status | sed -e 's/Playing/‚ñ∂Ô∏è/' -e 's/Paused/‚è∏Ô∏è/'
         gpmdp-remote current
     } | tr '\n' ' '
}

cpuCount="$(cat /proc/cpuinfo | grep -c processor)"

cpuBar() {
    val="$(echo "$1" | sed 's/\..*$//')"
    progbar "$val" 100 10
}

cpuState() {
    out="$(top -1 -b -n 2 -d 0.05 -w 80)"
    printf '%s' "$out" | grep Tasks | tail -1
    printf '%s' "$out" | grep -e '%Cpu' | tail -$cpuCount | sed 's/%Cpu/cpu/' | tr -d ':' | while read cpu us _us sy _st ni _ni; do
        cpuPath="/sys/devices/system/cpu/$cpu"
        printf '%s %s %4d MHz %s us %s sy %s ni\n' \
            "$cpu" \
            "$(sed -e 's/performance/üêá/' -e 's/powersave/üê¢/' < "$cpuPath/cpufreq/scaling_governor")" \
            "$(( $(<"$cpuPath/cpufreq/scaling_cur_freq") / 1000 ))" "$(cpuBar $us)" "$(cpuBar $sy)" "$(cpuBar $ni)"
    done
}

netState() {
    state="$(ip -o a show up | cut -d'\' -f 1 | grep -v ': lo' | sed -e 's/^[^ ]* //' -e 's/ \+/ /g')"
    printf "$state" | cut -d' ' -f 1 | sort -u | while read iface; do
        wifi="$(printf "$iface" | grep -o 'wlp[[:alnum:]]\+')"
        printf "<b>$iface</b> "
        firstIndent=2
        if test -n "$wifi"; then
            linkStat="$(iw $wifi link | sed 's/^[[:space:]]\+//g')"
            printf "$linkStat" | grep SSID | tr -d '\n'
            local db="$(printf "$linkStat" | grep signal | grep -o '[0-9-]\+')"
            printf " %2d dBm " "$db"
            progbar $((100 + db)) 60 -vh
            echo
            firstIndent=1
        fi
        printf "$state" | grep "^$iface" | cut -d' ' -f 2- | sed "$firstIndent,\$s/^/  /"
    done
}

formatSection() {
    section="$(sed -e "1 s/^/$1 /" -e '1! s/^/   /')"
    test -n "$section" && printf "%s\n\n" "$section"
}

while true; do
    feedback -r 1337 $noTimeout "$(windowState)" "$(
        echo
        date +'%a %Y/%m/%d %H:%M.%S (epoch+%s)' | formatSection '‚è∞'
        windowList | formatSection '[]'
        powerState | formatSection 'üîå'
        netState | formatSection 'üì∂'
        playerState | formatSection 'üéµ'
        soundState | formatSection 'üîä'
        if test -z "$skipped"; then
            printf 'Waiting for top...\n\n\n\n\n%79s' '.'
        else
            cpuState
        fi | formatSection 'üìä'
    )"
    sleep 0.2
    skipped=1
done &
loopId=$!

#TODO: move into a 'wait for super up' script
if test -n "$noTimeout"; then
    xsk | while read k; do
        case "$k" in
           Super_*\ 0)
               kill $loopId;
               feedback -x 1337;
               exit
            ;;
           *) echo "$k"
        esac
    done
fi
